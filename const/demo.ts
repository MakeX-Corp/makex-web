// Demo data and content for the landing page

export const DEMO_PROMPT = "A calorie tracker app like Cal AI";

export const DEMO_CODE_SNIPPETS = [
  "function CalorieTracker() {",
  "  const [meals, setMeals] = useState([]);",
  "  const [isAnalyzing, setIsAnalyzing] = useState(false);",
  "  const [dailyGoal, setDailyGoal] = useState(2000);",
  "  const [totalCalories, setTotalCalories] = useState(0);",
  "  const [currentPhoto, setCurrentPhoto] = useState(null);",
  "",
  "  const takePhoto = async () => {",
  "    const result = await ImagePicker.launchCameraAsync({",
  "      mediaTypes: ImagePicker.MediaTypeOptions.Images,",
  "      allowsEditing: true,",
  "      aspect: [4, 3],",
  "      quality: 0.8,",
  "    });",
  "",
  "    if (!result.canceled) {",
  "      setCurrentPhoto(result.assets[0].uri);",
  "      await analyzeFoodImage(result.assets[0].uri);",
  "    }",
  "  };",
  "",
  "  const analyzeFoodImage = async (imageUri) => {",
  "    setIsAnalyzing(true);",
  "    try {",
  "      const formData = new FormData();",
  "      formData.append('image', {",
  "        uri: imageUri,",
  "        type: 'image/jpeg',",
  "        name: 'food.jpg'",
  "      });",
  "",
  "      const response = await fetch('/api/analyze-food', {",
  "        method: 'POST',",
  "        body: formData",
  "      });",
  "",
  "      const result = await response.json();",
  "      const newMeal = {",
  "        id: Date.now(),",
  "        name: result.foodName,",
  "        calories: result.calories,",
  "        image: imageUri,",
  "        timestamp: new Date().toISOString(),",
  "        nutrients: result.nutrients",
  "      };",
  "",
  "      setMeals([newMeal, ...meals]);",
  "      setTotalCalories(prev => prev + result.calories);",
  "      setCurrentPhoto(null);",
  "    } catch (error) {",
  "      console.error('Error analyzing food:', error);",
  "    } finally {",
  "      setIsAnalyzing(false);",
  "    }",
  "  };",
  "",
  "  return (",
  "    <View style={styles.container}>",
  "      <View style={styles.header}>",
  "        <Text style={styles.title}>CalorieTracker</Text>",
  "        <Text style={styles.subtitle}>{totalCalories} / {dailyGoal} cal</Text>",
  "      </View>",
  "      <View style={styles.progressBar}>",
  "        <View style={[styles.progress, { width: `${(totalCalories / dailyGoal) * 100}%` }]} />",
  "      </View>",
  "      {currentPhoto && (",
  "        <View style={styles.photoPreview}>",
  "          <Image source={{ uri: currentPhoto }} style={styles.previewImage} />",
  "          <Text style={styles.analyzingText}>Analyzing food...</Text>",
  "        </View>",
  "      )}",
  "      <FlatList",
  "        data={meals}",
  "        renderItem={({ item }) => (",
  "          <View style={styles.mealCard}>",
  "            <Image source={{ uri: item.image }} style={styles.foodImage} />",
  "            <View style={styles.mealInfo}>",
  "              <Text style={styles.foodName}>{item.name}</Text>",
  "              <Text style={styles.calories}>{item.calories} cal</Text>",
  "            </View>",
  "          </View>",
  "        )}",
  "        keyExtractor={item => item.id.toString()}",
  "      />",
  "      <TouchableOpacity style={styles.cameraButton} onPress={takePhoto}>",
  '        <Ionicons name="camera" size={30} color="white" />',
  "      </TouchableOpacity>",
  "    </View>",
  "  );",
  "}",
] as const;

export const REALISTIC_CODE_DEMO = [
  'import React, { useState, useEffect } from "react"',
  'import { View, Text, TouchableOpacity, FlatList, Image, Alert } from "react-native"',
  'import { Ionicons } from "@expo/vector-icons"',
  'import * as ImagePicker from "expo-image-picker"',
  'import { Camera } from "expo-camera"',
  'import AsyncStorage from "@react-native-async-storage/async-storage"',
  "",
  "export default function CalorieTracker() {",
  "  const [meals, setMeals] = useState([])",
  "  const [isAnalyzing, setIsAnalyzing] = useState(false)",
  "  const [dailyGoal, setDailyGoal] = useState(2000)",
  "  const [totalCalories, setTotalCalories] = useState(0)",
  "  const [currentPhoto, setCurrentPhoto] = useState(null)",
  "  const [weeklyData, setWeeklyData] = useState([])",
  "  const [streakCount, setStreakCount] = useState(0)",
  "",
  "  useEffect(() => {",
  "    loadUserData()",
  "    calculateWeeklyProgress()",
  "  }, [])",
  "",
  "  const loadUserData = async () => {",
  "    try {",
  "      const savedMeals = await AsyncStorage.getItem('@meals')",
  "      const savedGoal = await AsyncStorage.getItem('@dailyGoal')",
  "      if (savedMeals) setMeals(JSON.parse(savedMeals))",
  "      if (savedGoal) setDailyGoal(parseInt(savedGoal))",
  "    } catch (error) {",
  "      console.error('Error loading data:', error)",
  "    }",
  "  }",
  "",
  "  const saveMealsData = async (newMeals) => {",
  "    try {",
  "      await AsyncStorage.setItem('@meals', JSON.stringify(newMeals))",
  "    } catch (error) {",
  "      console.error('Error saving meals:', error)",
  "    }",
  "  }",
  "",
  "  const takePhoto = async () => {",
  "    const { status } = await Camera.requestCameraPermissionsAsync()",
  "    if (status !== 'granted') {",
  "      Alert.alert('Permission needed', 'Camera access is required to scan food')",
  "      return",
  "    }",
  "",
  "    const result = await ImagePicker.launchCameraAsync({",
  "      mediaTypes: ImagePicker.MediaTypeOptions.Images,",
  "      allowsEditing: true,",
  "      aspect: [4, 3],",
  "      quality: 0.8,",
  "    })",
  "",
  "    if (!result.canceled) {",
  "      setCurrentPhoto(result.assets[0].uri)",
  "      await analyzeFoodImage(result.assets[0].uri)",
  "    }",
  "  }",
  "",
  "  const analyzeFoodImage = async (imageUri) => {",
  "    setIsAnalyzing(true)",
  "    try {",
  "      // Simulate AI analysis delay",
  "      await new Promise(resolve => setTimeout(resolve, 2000))",
  "",
  "      const mockFoodData = [",
  "        { name: 'Grilled Chicken Breast', calories: 231, protein: 43.5 },",
  "        { name: 'Caesar Salad', calories: 470, carbs: 22 },",
  "        { name: 'Chocolate Chip Cookie', calories: 78, sugar: 9.2 },",
  "        { name: 'Green Smoothie', calories: 156, fiber: 8.1 },",
  "        { name: 'Avocado Toast', calories: 290, fat: 18.5 }",
  "      ]",
  "",
  "      const randomFood = mockFoodData[Math.floor(Math.random() * mockFoodData.length)]",
  "",
  "      const newMeal = {",
  "        id: Date.now().toString(),",
  "        name: randomFood.name,",
  "        calories: randomFood.calories,",
  "        image: imageUri,",
  "        timestamp: new Date().toISOString(),",
  "        nutrients: {",
  "          protein: randomFood.protein || 0,",
  "          carbs: randomFood.carbs || 0,",
  "          fat: randomFood.fat || 0,",
  "          fiber: randomFood.fiber || 0,",
  "          sugar: randomFood.sugar || 0",
  "        }",
  "      }",
  "",
  "      const updatedMeals = [newMeal, ...meals]",
  "      setMeals(updatedMeals)",
  "      setTotalCalories(prev => prev + randomFood.calories)",
  "      await saveMealsData(updatedMeals)",
  "      setCurrentPhoto(null)",
  "",
  "      // Check if goal achieved",
  "      if (totalCalories + randomFood.calories >= dailyGoal * 0.9) {",
  "        Alert.alert('Great job!', 'You\\'re close to your daily goal!')",
  "        updateStreak()",
  "      }",
  "",
  "    } catch (error) {",
  "      Alert.alert('Analysis failed', 'Please try again')",
  "      console.error('Error analyzing food:', error)",
  "    } finally {",
  "      setIsAnalyzing(false)",
  "    }",
  "  }",
  "",
  "  const renderMeal = ({ item }) => (",
  "    <View style={styles.mealCard}>",
  "      <Image source={{ uri: item.image }} style={styles.foodImage} />",
  "      <View style={styles.mealInfo}>",
  "        <Text style={styles.foodName}>{item.name}</Text>",
  "        <Text style={styles.calories}>{item.calories} cal</Text>",
  "        <Text style={styles.timestamp}>",
  "          {new Date(item.timestamp).toLocaleDateString()}",
  "        </Text>",
  "      </View>",
  "      <TouchableOpacity",
  "        style={styles.deleteButton}",
  "        onPress={() => deleteMeal(item.id)}",
  "      >",
  '        <Ionicons name="trash-outline" size={20} color="#ff4444" />',
  "      </TouchableOpacity>",
  "    </View>",
  "  )",
  "",
  "  return (",
  "    <View style={styles.container}>",
  "      <View style={styles.header}>",
  "        <Text style={styles.title}>CalorieTracker</Text>",
  "        <View style={styles.statsRow}>",
  "          <Text style={styles.subtitle}>{totalCalories} / {dailyGoal} cal</Text>",
  "          <Text style={styles.streak}>ðŸ”¥ {streakCount} day streak</Text>",
  "        </View>",
  "      </View>",
  "",
  "      <View style={styles.progressContainer}>",
  "        <View style={styles.progressBar}>",
  "          <View",
  "            style={[",
  "              styles.progress,",
  "              { width: `${Math.min((totalCalories / dailyGoal) * 100, 100)}%` }",
  "            ]}",
  "          />",
  "        </View>",
  "        <Text style={styles.progressText}>",
  "          {Math.round((totalCalories / dailyGoal) * 100)}% of daily goal",
  "        </Text>",
  "      </View>",
  "",
  "      {currentPhoto && (",
  "        <View style={styles.photoPreview}>",
  "          <Image source={{ uri: currentPhoto }} style={styles.previewImage} />",
  "          {isAnalyzing && (",
  "            <View style={styles.analyzingOverlay}>",
  '              <Ionicons name="scan" size={40} color="#fff" />',
  "              <Text style={styles.analyzingText}>Analyzing food...</Text>",
  "            </View>",
  "          )}",
  "        </View>",
  "      )}",
  "",
  "      <FlatList",
  "        data={meals}",
  "        renderItem={renderMeal}",
  "        keyExtractor={item => item.id}",
  "        style={styles.mealsList}",
  "        showsVerticalScrollIndicator={false}",
  "        ListEmptyComponent={() => (",
  "          <View style={styles.emptyState}>",
  '            <Ionicons name="restaurant-outline" size={60} color="#ccc" />',
  "            <Text style={styles.emptyText}>No meals tracked yet</Text>",
  "            <Text style={styles.emptySubtext}>Take a photo to get started!</Text>",
  "          </View>",
  "        )}",
  "      />",
  "",
  "      <TouchableOpacity",
  "        style={[styles.cameraButton, isAnalyzing && styles.cameraButtonDisabled]}",
  "        onPress={takePhoto}",
  "        disabled={isAnalyzing}",
  "      >",
  '        <Ionicons name="camera" size={30} color="white" />',
  "      </TouchableOpacity>",
  "    </View>",
  "  )",
  "}",
] as const;
